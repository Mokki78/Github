{"ast":null,"code":"var _jsxFileName = \"/Users/monikasaele/Github/react-app-1/src/context/StoreContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StoreContext = /*#__PURE__*/createContext();\nconst getDefaultCart = products => {\n  let cart = {};\n  for (let i = 0; i < products.length; i++) {\n    cart[products[i].id] = 0;\n  }\n  return cart;\n};\nexport const StoreContextProvider = props => {\n  _s();\n  const [cartItems, setCartItems] = useState({});\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Set to true initially\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    async function fetchProducts() {\n      try {\n        const response = await fetch(\"https://api.noroff.dev/api/v1/online-shop/\");\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setProducts(data);\n        setCartItems(getDefaultCart(data)); // Initialize cart items with products data\n        setIsLoading(false); // Set loading to false when data is loaded\n      } catch (error) {\n        setIsError(true); // Set isError to true if an error occurs\n        console.error(\"Error fetching product data:\", error);\n      }\n    }\n    fetchProducts();\n  }, []);\n  console.log(\"Cart items:\", cartItems);\n  console.log(\"Products:\", products);\n  const getTotalCartAmount = () => {\n    let totalAmount = 0;\n    for (const itemId in cartItems) {\n      const quantity = cartItems[itemId];\n      if (quantity > 0) {\n        const productId = Number(itemId);\n        const itemInfo = products.find(product => product.id === productId);\n        if (itemInfo) {\n          totalAmount += quantity * itemInfo.price;\n        }\n      }\n    }\n    return totalAmount;\n  };\n  const addToCart = itemId => {\n    setCartItems(prev => {\n      return {\n        ...prev,\n        [itemId]: prev[itemId] + 1\n      };\n    });\n  };\n  const removeFromCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: prev[itemId] - 1\n    }));\n  };\n  const updateCartItemCount = (newAmount, itemId) => {\n    newAmount = Number(newAmount);\n    if (isNaN(newAmount)) {\n      return;\n    }\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: newAmount\n    }));\n  };\n  const contextValue = {\n    cartItems,\n    products,\n    addToCart,\n    removeFromCart,\n    updateCartItemCount,\n    getTotalCartAmount\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"An error occurred while fetching data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(StoreContextProvider, \"1PpmpbU3CNUgibJbdvNA7rAfP9U=\");\n_c = StoreContextProvider;\nexport default StoreContextProvider;\nvar _c;\n$RefreshReg$(_c, \"StoreContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","StoreContext","getDefaultCart","products","cart","i","length","id","StoreContextProvider","props","_s","cartItems","setCartItems","setProducts","isLoading","setIsLoading","isError","setIsError","fetchProducts","response","fetch","ok","Error","data","json","error","console","log","getTotalCartAmount","totalAmount","itemId","quantity","productId","Number","itemInfo","find","product","price","addToCart","prev","removeFromCart","updateCartItemCount","newAmount","isNaN","contextValue","children","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["/Users/monikasaele/Github/react-app-1/src/context/StoreContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const StoreContext = createContext();\n\nconst getDefaultCart = (products) => {\n  let cart = {};\n  for (let i = 0; i < products.length; i++) {\n    cart[products[i].id] = 0;\n  }\n  return cart;\n};\n\nexport const StoreContextProvider = (props) => {\n  const [cartItems, setCartItems] = useState({});\n  const [products, setProducts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Set to true initially\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    async function fetchProducts() {\n      try {\n        const response = await fetch(\n          \"https://api.noroff.dev/api/v1/online-shop/\"\n        );\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setProducts(data);\n        setCartItems(getDefaultCart(data)); // Initialize cart items with products data\n        setIsLoading(false); // Set loading to false when data is loaded\n      } catch (error) {\n        setIsError(true); // Set isError to true if an error occurs\n        console.error(\"Error fetching product data:\", error);\n      }\n    }\n\n    fetchProducts();\n  }, []);\n\n  console.log(\"Cart items:\", cartItems);\n  console.log(\"Products:\", products);\n\n  const getTotalCartAmount = () => {\n    let totalAmount = 0;\n    for (const itemId in cartItems) {\n      const quantity = cartItems[itemId];\n\n      if (quantity > 0) {\n        const productId = Number(itemId);\n        const itemInfo = products.find((product) => product.id === productId);\n\n        if (itemInfo) {\n          totalAmount += quantity * itemInfo.price;\n        }\n      }\n    }\n    return totalAmount;\n  };\n\n  const addToCart = (itemId) => {\n    setCartItems((prev) => {\n      return {\n        ...prev,\n        [itemId]: prev[itemId] + 1,\n      };\n    });\n  };\n\n  const removeFromCart = (itemId) => {\n    setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n  };\n\n  const updateCartItemCount = (newAmount, itemId) => {\n    newAmount = Number(newAmount);\n\n    if (isNaN(newAmount)) {\n      return;\n    }\n\n    setCartItems((prev) => ({ ...prev, [itemId]: newAmount }));\n  };\n\n  const contextValue = {\n    cartItems,\n    products,\n    addToCart,\n    removeFromCart,\n    updateCartItemCount,\n    getTotalCartAmount,\n  };\n\n  if (isLoading) {\n\n    return <p>Loading...</p>;\n  }\n\n  if (isError) {\n    \n    return <p>An error occurred while fetching data.</p>;\n  }\n\n  return (\n    <StoreContext.Provider value={contextValue}>\n      {props.children}\n    </StoreContext.Provider>\n  );\n};\n\nexport default StoreContextProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,MAAMM,cAAc,GAAIC,QAAQ,IAAK;EACnC,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACxCD,IAAI,CAACD,QAAQ,CAACE,CAAC,CAAC,CAACE,EAAE,CAAC,GAAG,CAAC;EAC1B;EACA,OAAOH,IAAI;AACb,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACM,QAAQ,EAAEU,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd,eAAeoB,aAAaA,CAAA,EAAG;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4CACF,CAAC;QACD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,WAAW,CAACU,IAAI,CAAC;QACjBX,YAAY,CAACV,cAAc,CAACqB,IAAI,CAAC,CAAC,CAAC,CAAC;QACpCR,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdR,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAClBS,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF;IAEAP,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAENQ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEhB,SAAS,CAAC;EACrCe,OAAO,CAACC,GAAG,CAAC,WAAW,EAAExB,QAAQ,CAAC;EAElC,MAAMyB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIC,WAAW,GAAG,CAAC;IACnB,KAAK,MAAMC,MAAM,IAAInB,SAAS,EAAE;MAC9B,MAAMoB,QAAQ,GAAGpB,SAAS,CAACmB,MAAM,CAAC;MAElC,IAAIC,QAAQ,GAAG,CAAC,EAAE;QAChB,MAAMC,SAAS,GAAGC,MAAM,CAACH,MAAM,CAAC;QAChC,MAAMI,QAAQ,GAAG/B,QAAQ,CAACgC,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAAC7B,EAAE,KAAKyB,SAAS,CAAC;QAErE,IAAIE,QAAQ,EAAE;UACZL,WAAW,IAAIE,QAAQ,GAAGG,QAAQ,CAACG,KAAK;QAC1C;MACF;IACF;IACA,OAAOR,WAAW;EACpB,CAAC;EAED,MAAMS,SAAS,GAAIR,MAAM,IAAK;IAC5BlB,YAAY,CAAE2B,IAAI,IAAK;MACrB,OAAO;QACL,GAAGA,IAAI;QACP,CAACT,MAAM,GAAGS,IAAI,CAACT,MAAM,CAAC,GAAG;MAC3B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMU,cAAc,GAAIV,MAAM,IAAK;IACjClB,YAAY,CAAE2B,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACT,MAAM,GAAGS,IAAI,CAACT,MAAM,CAAC,GAAG;IAAE,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,MAAMW,mBAAmB,GAAGA,CAACC,SAAS,EAAEZ,MAAM,KAAK;IACjDY,SAAS,GAAGT,MAAM,CAACS,SAAS,CAAC;IAE7B,IAAIC,KAAK,CAACD,SAAS,CAAC,EAAE;MACpB;IACF;IAEA9B,YAAY,CAAE2B,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACT,MAAM,GAAGY;IAAU,CAAC,CAAC,CAAC;EAC5D,CAAC;EAED,MAAME,YAAY,GAAG;IACnBjC,SAAS;IACTR,QAAQ;IACRmC,SAAS;IACTE,cAAc;IACdC,mBAAmB;IACnBb;EACF,CAAC;EAED,IAAId,SAAS,EAAE;IAEb,oBAAOd,OAAA;MAAA6C,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1B;EAEA,IAAIjC,OAAO,EAAE;IAEX,oBAAOhB,OAAA;MAAA6C,QAAA,EAAG;IAAsC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACtD;EAEA,oBACEjD,OAAA,CAACC,YAAY,CAACiD,QAAQ;IAACC,KAAK,EAAEP,YAAa;IAAAC,QAAA,EACxCpC,KAAK,CAACoC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAE5B,CAAC;AAACvC,EAAA,CA/FWF,oBAAoB;AAAA4C,EAAA,GAApB5C,oBAAoB;AAiGjC,eAAeA,oBAAoB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}